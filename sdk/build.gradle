apply plugin: 'com.android.library'
//apply plugin: 'com.github.dcendents.android-maven'
//apply plugin: 'com.jfrog.bintray'

group = 'io.kickflip'
version = '1.3'


def getVersionCode() {
    return 10
}

def getVersionName() {
    return '1.3'
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    sourceSets.main {
        jni.srcDirs = [] // disable automatic ndk-build call. Invoke `ndk-build` manually in ./jni when native code changes are made
        jniLibs.srcDir 'src/main/libs'
    }

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 22
        versionCode getVersionCode()
        versionName getVersionName()

    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt', 'proguard-google-api-client.txt'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

}

configurations {
    jaxDoclet
    classpaths
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'com.android.support:support-v4:22.1.1'

    compile 'com.google.http-client:google-http-client:1.19.0'
    compile 'com.google.http-client:google-http-client-android:1.19.0'
    compile 'com.google.http-client:google-http-client-jackson2:1.19.0'
    compile 'com.google.oauth-client:google-oauth-client:1.19.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'com.google.protobuf:protobuf-java:2.6.1'

    compile 'com.amazonaws:aws-android-sdk-core:2.2.1'
    compile 'com.amazonaws:aws-android-sdk-s3:2.2.1'

    compile 'com.fasterxml.jackson.core:jackson-core:2.5.0'

    compile files('libs/m3u8parser-0.2.jar')

    // For Doclava JavaDoc
    jaxDoclet("com.google.doclava:doclava:1.0.5")
    //classpaths files('build/classes/release')
    classpaths fileTree(dir: 'build/classes/release').matching { include 'io/kickflip/sdk/Kickflip.java' }
    classpaths files(new File(System.getenv('ANDROID_HOME') + '/platforms/android-21/android.jar'))
}

// Bintray publishing

//def repoName = 'Kickflip'
//def repoDesc = 'Kickflip.io Android SDK'
//def siteUrl = 'https://kickflip.io'
//def gitUrl = 'https://github.com/Kickflip/kickflip-android-sdk.git'
//
//bintray {
//    user = username
//    key = apiKey
//
//    configurations = ['archives'] //When uploading configuration files
//    pkg {
//        repo = "Kickflip"
//        name = 'io.kickflip:sdk'
//        desc = repoDesc
//        websiteUrl = siteUrl
//        issueTrackerUrl = 'https://github.com/Kickflip/kickflip-android-sdk/issues'
//        vcsUrl = gitUrl
//        licenses = ['Apache-2.0']
//        labels = ['aar', 'android', 'kickflip']
//        publicDownloadNumbers = true
//        publish = true //If version should be auto published after an upload
//    }
//}
//
//install {
//    repositories.mavenInstaller {
//        pom {
//            project {
//                packaging 'aar'
//                name repoDesc
//                description repoDesc
//                url siteUrl
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//                developers {
//                    developer {
//                        id 'onlyinamerica'
//                        name 'David Brodsky'
//                        email 'dbro@dbro.pro'
//                    }
//                }
//                scm {
//                    connection gitUrl
//                    developerConnection siteUrl
//                    url siteUrl
//                }
//            }
//        }
//    }
//}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}


// Doclava JavaDoc
//android.libraryVariants.all { variant ->
//
//    task("generate${variant.name}Javadoc", type: Javadoc) {
//        source = android.sourceSets.main.java
//        title = null
//        options.docletpath = configurations.jaxDoclet.files.asType(List)
//        options.classpath = configurations.classpaths.files.asType(List)
//        options {
//            doclet "com.google.doclava.Doclava"
//            bootClasspath new File(System.getenv('JAVA_HOME') + "/jre/lib/rt.jar")
//            addStringOption "warning", '110'  // Allow undocumented types
//            addStringOption "overview", "/Users/davidbrodsky/Code/android/kickflip-android-example/submodules/kickflip-android-sdk/sdk/src/javadoc-overview.html"
//            addStringOption "public"
//            addStringOption "hdf project.name", "Kickflip Android SDK"
//            addStringOption "federate android", "http://d.android.com/reference"
//            addStringOption "federationxml android", "http://doclava.googlecode.com/svn/static/api/android-10.xml"
//        }
//    }
//
//}
